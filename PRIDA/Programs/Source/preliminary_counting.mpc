# Given a choice vector of secret shares from Data Owner for all Data Customers, 
# compute the total sum of choices for each Data Customers
# cv[i][j]: sint - choice of Data Owner i for Data Customer j
# if cv[i][j] = 1, then Data Owner i agrees to share data with Data Customer j
# N - number of Data Owners
# M - number of Data Customers
# returns a list of total sum of choices for each Data Customer
# len(result[i]) = M
# result[j] = sum(cv[i..N][j])
def preliminary_counting(cv, N, M):
    result = sint.Array(M)
    result.assign_all(0)

    for i in range(N):
        for j in range(M):
            result[j] += cv[i][j]

    return result

def preliminary_counting_test():
    N = 3
    M = 3
    cv = [[sint(1), sint(1), sint(1)], [sint(1), sint(1), sint(1)], [sint(1), sint(1), sint(0)]]
    actual = preliminary_counting(cv, N, M).reveal_list()
    expected = [3, 3, 2]
    result = True
    for i in range(M):
        check = actual[i] == expected[i]
        result = check.if_else(True, False)
        
    @if_(result != True)
    def fail():
        print_ln('FAIL')

# preliminary_counting_test()